<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251" />
<title>Массивы в JavaScript</title>
<script src="Script.js"></script>
<link rel="stylesheet" type="text/css" href="Style.css"/>
</head>
<body>

<h2>Массивы в JavaScript</h2>

<p>Javascript поддерживает два вида структуры "массив":
<ul>
  <li>Ассоциативный массив (хеш), где данные хранятся по произвольному ключу.
    Об этом читайте в разделе Объекты.
   <li>Числовой массив Array, где данные хранятся по номерам.
    Он описан в этой статье.
</ul>
<p>Javascript - очень гибкий язык, поэтому технически в Array можно хранить произвольные ключи, как в Object. Но лучше использовать типы по назначению.

Для хранения данных по номеру предназначен тип Array.
<xmp>
	var arr = new Array()
	arr.test = 5
	arr[1] = "blabla"
	...
</xmp>

<p>В типе Array есть специальные методы, ориентированные именно на работу с числовыми ключами.

<h3 class="show" onclick="Click(this)">Создание и изменение</h3>
<div>
<p>Есть два эквивалентных способа создания массива:
<xmp>
var a = new Array()
var a = []
</xmp>

<p>Или, сразу со значениями
<xmp>
var a = new Array("a", 1, true)
var a = ["a", 1, true]
</xmp>

<p>Эти способы работают одинаково, кроме объявления вида new Array(10), когда у конструктора есть единственный аргумент-число.

<p>Такое объявление создаст пустой массив (все элементы <code>undefined</code>) длиной 10. 
По возможности, не используйте <code>new Array</code>.

<p>Отсчет элементов начинается с нуля:
alert(a[0])   // => "a"

<p>Массив хранит данные по численным ключам, но внутри он использует точно такой же хэш (ту же структуру данных), как и обычный объект, поэтому можно сделать так:
<xmp>
var a = []
a[1] = 1
a[999999] = 2
</xmp>

и массив a будет занимать память, нужную для хранения этих двух соответствий, а не займет длинный непрерывный кусок памяти, как это произошло бы в языке С.
</div>

<h3 class="show" onclick="Click(this)">Авто-длина length</h3>
<div>
<p>У каждого массива есть свойство length, которое автоматом меняется при каждом обновлении массива. Длина массива - это не количество элементов, а максимальный целый ключ + 1:
<xmp>
alert(a.length) // всего 2 элемента, но выведет 1000000
</xmp>

<p>Добавлять новый элемент можно эквивалентными вызовами
<xmp>
a[a.length] = "new element"
a.push("new element")
</xmp>
</div>

<h3 class="show" onclick="Click(this)">Перебор элементов</h3>
<div>
<p>Перебор элементов обычно (когда индексы непрерывные) осуществляется простым циклом:
<xmp>
	var arr = [ "array", "elements", "here" ]
	for(var i=0; i<arr.length; i++) {
	  ... сделать что-то с arr[i] ...
	}
</xmp>

<p>Если индексы - с разрывами, то перебор осуществляется так же, как в объектах:
<xmp>
	var arr = []
	arr[1] = 123
	arr[9999] = 456
	 
	for(var i in arr) {
	    if (!arr.hasOwnProperty(i)) continue;
	//   ... сделать что-то с arr[i] ...
	}
</xmp>
</div>

<h3 class="show" onclick="Click(this)">Очередь + стек</h3>
<div>
<p>В массиве есть всё необходимое, чтобы работать с ним как с очередью или со стеком, или и с тем и другим одновременно.

<p>Методы push и pop добавляют или вынимают значение с конца массива
<xmp>
	var arr = [3,5,7]
	arr.push(9)
	var last = arr.pop()    //= 9
	var last = arr.pop()   // = 7
	alert(arr.length)   // = 2
</xmp>

<p>Методы shift/unshift делают то же самое, с начала массива.
</xmp>
	var arr = [4,6,8]
	arr.unshift(2) // arr = [2,4,6,8]
	arr.unshift(0) // arr = [0,2,4,6,8]
	var last = arr.shift() // last = 0, arr = [2,4,6,8]
	arr.shift()  // arr = [4,6,8]
</xmp>

<p><code>shift/unshift</code> обычно приводят к перенумерации всего массива. shift сдвигает все элементы на единицу влево, а unshift - вправо. Поэтому на больших массивах эти методы работают медленнее, чем push/pop.
</div>

<h3 class="show" onclick="Click(this)">Другие методы</h3>
<div>
<dl>
<dt><code>slice(begin[, end])</code>
<dd>Возвращает подмассив с индексами <code>begin…end</code>.
<dt><code>splice(index, deleteCount[, element1,…, elementN])</code>
<dd>Удалить deleteCount элементов, начиная с <code>index</code>, и вставить на их место <code>element1…elementN</code>.
<dt><code>join(separator)</code>
<dd>Объединить массив в строку, вставив между элементами разделитель.
</dl>
</div>

<h3 class="show" onclick="Click(this)">Задание</h3>
<div>
Напишите скрипт, 
</div>


<hr width="40%" align="center">
</body>
</html>