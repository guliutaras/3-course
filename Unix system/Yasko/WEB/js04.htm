<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251" />
<title>Условные операторы</title>
<script src="Script.js"></script>
<link rel="stylesheet" type="text/css" href="Style.css"/>
</head>
<body>

<h2>Условные операторы</h2>

<p>Операторы служат для управления потоком команд в JavaScript. Один объект может быть разбит на несколько строк,или, наоборот в одной строке может бытьнесколько операторов.

<p>Необходимо знать следующее, во-первых,блоки операторов, такие как определения функций, должны быть заключены в фигурные скобки. 
Во-вторых, точка с запятой служит разделителем отдельных операторов. Если пропустить точку с запятой, поведение программы может стать непредсказуемым.

<p>Так как JavaScript не имеет жестких требований к форматированию текста программы, можно вставлять символы перевода строки и отступа для лутшей читабельности текста.

Ниже описаны операторы, которые используются в JavaScript: 
<p>Очень часто возникает ситуация, когда нам нужно выполнить какое-либо действие в зависимости от какого-либо условия. 
Например, у нас интернет-магазин одежды. Мы спрашиваем у пользователя кто он (мужчина или женщина) и 
в зависимости от ответа отображаем список соответствующих товаров (мужских или женских). 
При написании подобных программ используется условный оператор if .

<p>Javascript if() – самый простой, но несмотря на это, один из наиболее функциональных операторов любого языка програмирования. Он позволяет задать необходимые ветвления программы, в соответствии с определенным алгоритмом. Как и для многих других языков програмирования синтаксис этого оператора в JS выглядит следующим образом:

<pre>
if( B ) {S1}
else {S2}
</pre>
где B - выражение логического типа, а S1 и S2 - операторы.

<p>Работает это так: вычисляется значение выражения B, если оно истинно, то выполняется оператор S1, если оно ложно, то выполняется оператор S2. Строку else {S2} можно опустить.



<p>Рассмотрим следующий пример. 
Пусть у нас есть форма, в которую пользователь вводит 3 значения. Напишем сценарий, который определит максимальное из введеных чисел.

<p>Для начала напишем в html-странице код формы:
<xmp style="display:block"><html>
  <head>
    <title>javascript if</title>
  <script>
   function maxZnach(obj){
    var a=1*obj.zn1.value;
    var b=1*obj.zn2.value;
    var c=1*obj.zn3.value;
    var m=a;
    if (b>m) m=b;
    if (c>m) m=c;
    obj.res.value=m;
   }
  </script>
 </head>
<body>
 <form name="forma4">
 Значение 1 <input type="text" size="8" maxlength="8" name="zn1">
 Значение 2 <input type="text" size="8" maxlength="8" name="zn2">
 Значение 3 <input type="text" size="8" maxlength="8" name="zn3"><br><br>
 <input type="button" value="Максимальное значение" onClick="maxZnach(forma4);">
 <input type="text" size="8" maxlength="8" name="res">
 <input type="reset" value="Отменить">
 </form>
</body>
</html>
</xmp>
<h4 class="show" onclick="OpenPrev(this)">Выполнить</h4>

В принципе все работает, но согласитесь, что код нашей функции слишком длинный. Чтобы его сократить, используется оператор выбора switch. Синтаксис у него следующий:
<pre>
switch (B){
case L1: S1;
case L2: S2;
... ... ...
case Ln: Sn;
default:S
}
</pre>
где B - выражение, L1, L2, ..., Ln - литералы, а S1, S2, ..., Sn - операторы.
Оператор break используется, чтобы обеспечить завершение работы переключателя после выполнения нужного варианта. Если его опустить ничего не изменится, просто с ним сценарий работает быстрее, хотя в данном примере это и незаметно.



<hr width="40%" align="center">
</body>
</html>