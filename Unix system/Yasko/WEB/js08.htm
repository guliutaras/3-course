<!DOCTYPE html>
<html lang = "ru">
<head>
	<meta charset = "utf-8">
	<title>
		Объекты. Встроенные объекты. Дата и время. Математические вычисления.
	</title>
</head>
<body>
<h2>Объекты. Встроенные объекты. Дата и время. Математические вычисления.</h2>
<p>
	Объекты - это коллекции именованых значений, которые обычно называют свойствами объекта. Доступ к свойству (или полю) возможен следующим образом:
<pre>
	имя_объекта.имя_поля
</pre>	
	Object - это примитивный тип объекта в JavaScript. Все объекты JavaScript являются потомками от Object. То есть, все JavaScript-объекты имеют методы, определённые в Object.
<pre>
	Obj = new Object()
</pre>
или
<pre>
	Obj = {}
</pre>
JavaScript предоставляет встроенные объекты. Это объекты Array, Boolean, Date, Error, Function, Global, 
JSON, Math, Number, Object, RegExp и String. Встроенные объекты имеют связанные методы, функции, свойства и константы,
которые подробно описаны в <a href ="http://javascript.ru/manual"> справочнике по языку </a>. Далее, я попробую в кратции описать только объекты Date и
<h3>Дата и время</h3>
<p>
Для создания нового объекта типа Date используется один из синтаксисов: new Date().
Эта команда создает объект Date с текущей датой и временем:
<pre>
	var now = new Date();
	alert(now);
</pre>
Для доступа к компонентам даты-времени объекта Date используются следующие методы:
<pre>
	//Получить год(из 4 цифр)
	getFullYear() 
	//Получить месяц, от 0 до 11.
	getMonth()
	//Получить число месяца, от 1 до 31. 
	getDate()
	//Получить соответствующие компоненты.  
	getHours(), getMinutes(), getSeconds(), getMilliseconds()
	//Получить номер дня в неделе. Неделя в JavaScript начинается с воскресенья, так что результат будет числом от 0(воскресенье) до 6(суббота).
	getDay()
	//Возвращает число миллисекунд, прошедших с 01.01.1970 00:00:00 UTC.
	getTime()
</pre>
	<h3>Математические вычисления</h3>
<p>
	Рассмотрим арифметические операторы, которые поддерживает JavaScript.
	<table border ="1">
		<tr>
			<td>+(плюс)</td><td>Сложение</td><td width = "20%">2 + 8</td><td width = "20%">10</td>
		</tr>
		<tr>
			<td>-(минус)</td><td>Вычитание</td><td>2 - 8</td><td>-6</td>
		</tr>
		<tr>	
			<td>*(звёздочка)</td><td>Умножение</td><td>2 * 8</td><td>16</td>
		</tr>
		<tr>	
			<td>/(слэш)</td><td>Обычное деление</td><td>6 / 3</td><td>2</td>
		</tr>
		<tr>	
			<td>%(процент)</td><td>Деление по модулю</td><td>7 / 3</td><td>1</td>
		</tr>
		<tr>	
			<td>++(два плюса)</td><td>Единичный инкремент</td><td>7++</td><td>8</td>
		</tr>
		<tr>
			<td>--(два минуса)</td><td>Единичный декремент</td><td>3--</td><td>2</td>
		</tr>
	</table>
</p>
<p>
Интересная особенность JavaScript - возможность выполнять арифметические операции над переменными различного типа. 
В этом случае интерпретатор самостоятельно выполняет приведение типов и выполняет указанную операцию. В процессе ведения типов используются следующие правила:
</p>
<ol>
<li> Если один из операндов - строка, то все остальные операнды приводятся к строковому виду.
<pre>
	var1 = "Дядя"
	var2 = "Ваня"
	result = var1 + " " + var2
	// result = "Дядя Ваня"
	mixed = var2 + 100
	// mixed = "Ваня100"		
</pre>
<li>Все логические операнды приводятся к числовому виду, кроме случаев, когда все операнды в выражении логические. При этом true приводится к "1", а false - к "0". При сочетании логических операндов со строками - все операдны переводятся в текстовый вид.
<pre>
	var1 = true
	var2 = true
	result = var1 + var2
	// result = 2
	mixed = var2 + 100
	// mixed = 101	
	var3 = "строка:"
	str = var3 + var1
	// str = "строка:true"
</pre>
<li>Если приведение типов выполнить не удалось - результатом выражения
 будет "NaN" (например, при попытке разделить строку на что-либо).
<pre>
	var1 = "Дядя"
	var2 = "Ваня"
	result = var1 / var2
	// result = "NaN"
	mixed = var2 * true
	// mixed = "NaN"		
</pre>
</ol>
<p>Однако на начальном этапе лучше воздержаться от приведения типов и 
фокусов с преобраованием результатов. Это избавит вас от значительного 
числа ошибок.</p>
	<h3>Объект Math</h3>
<p>
Объект Math содержит основные математические константы и стандартные 
математические функции. Наиболее часто используемые приведены в таблице:
</p>
<table border="1">
  <tr>
    <td colspan = "2">Свойства</td>
    </tr>
  <tr>
    <td>LN10</td>
    <td>Значение натурального логарифма числа 10</td>
    </tr>
  <tr>
    <td>LN2</td>
    <td>Значение натурального логарифма числа 2</td>
    </tr>
  <tr>
    <td> PI</td>
    <td>Значение числа Пи</td>
    </tr>
  <tr>
    <td colspan ="2">Методы</td>
    </tr>
  <tr>
    <td>abs(число)</td>
    <td>Возвращает абсолютное значение числа (т.е. число без учёта его знака)</td>
    </tr>
  <tr>
    <td>ceil(число)</td>
    <td>Откругляет число до ближайшего большего целого (округление "вверх")</td>
    </tr>
  <tr>
    <td>exp(число)</td>
    <td>Возвращает число "e" в степени "число"</td>
    </tr>
  <tr>
    <td> floor(число)</td>
    <td>Откругляет число до ближайшего меньшего целого (округление "вниз")</td>
    </tr>
  <tr>
    <td> max(число1, число2)</td>
    <td>Возвращает большее из двух чисел</td>
    </tr>
  <tr>
    <td>min(число1, число2)</td>
    <td>Возвращает меньшее из двух чисел</td>
    </tr>
  <tr>
    <td>pow(число1, число2)</td>
    <td>Возвращает "число1", возведённое в степень "число2"</td>
    </tr>
  <tr>
    <td> random()</td>
    <td>Возвращает случайное число в диапазоне от 0 до 1</td>
    </tr>
  <tr>
    <td>round(число)</td>
    <td>Округляет число в соответствии со стандартными правилами округления</td>
    </tr>
  <tr>
    <td>sqrt(число)</td>
    <td>Возвращает квадратный корень числа.</td>
    </tr>
</table>

</p>
<p>
Более детальную информацию можно получить на сайте <a href = "http://www.intuit.ru/">www.intuit.ru</a>
в разделе <a href = "http://www.intuit.ru/studies/higher_education/3406/courses/132/info">"Основы программирования на JavaScript"</a>.
</p>
</body>
</html>