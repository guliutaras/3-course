<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251" />
<title>Введение в JavaScript</title>
<script  src="Script.js"></script>
<link rel="stylesheet" type="text/css" href="Style.css"/>
</head>
<body>

<h2>Введение в JavaScript</h2>

<h3 class="show" onclick="Click(this)">Основные понятия</h3>
<div>
<p>JavaScript — объектно-ориентированный скриптовый язык программирования. Является диалектом языка ECMAScript.
<p>JavaScript обычно используется как встраиваемый язык для программного доступа к объектам приложений. Наиболее широкое применение находит в браузерах как язык сценариев для придания интерактивности веб-страницам.
<p>Основные архитектурные черты: динамическая типизация, слабая типизация, автоматическое управление памятью, прототипное программирование, функции как объекты первого класса.
<p>На JavaScript оказали влияние многие языки, при разработке была цель сделать язык похожим на Java, но при этом лёгким для использования непрограммистами. Языком JavaScript не владеет какая-либо компания или организация, что отличает его от ряда языков программирования, используемых в веб-разработке.
<p>Название «JavaScript» является зарегистрированным товарным знаком компании Oracle Corporation.
<p>Согласно рейтингу, базирующемуся на данных поисковых систем Google, MSN, Yahoo, Википедия и YouTube, в июне 2011 года JavaScript находится на 11 месте по популярности (год назад на 12).
JavaScript является самым популярным языком программирования, используемым для разработки веб-приложений на стороне клиента.
</div>

<h3 class="show" onclick="Click(this)">Область применения</h3>
<div>
<p>JavaScript используется в клиентской части веб-приложений: клиент-серверных программ, в котором клиентом выступает браузер, а сервером — веб-сервер, имеющих распределённую между сервером и клиентом логику. Обмен информацией в веб-приложениях происходит по сети. Одним из преимуществ такого подхода является тот факт, что клиенты не зависят от конкретной операционной системы пользователя, поэтому веб-приложения являются кроссплатформенными сервисами.
Пользовательские скрипты в браузере — это программы, написанные на JavaScript, выполняемые в браузере пользователя при загрузке страницы. Они позволяют автоматически заполнять формы, переформатировать страницы, скрывать нежелательное содержимое и встраивать желательное для отображения содержимое, изменять поведение клиентской части веб-приложений, добавлять элементы управления на страницу и т. д.
<p>JavaScript используется в AJAX, популярном подходе к построению интерактивных пользовательских интерфейсов веб-приложений, заключающемся в «фоновом» асинхронном обмене данными браузера с веб-сервером. В результате, при обновлении данных веб-страница не перезагружается полностью и интерфейс веб-приложения становится быстрее, чем это происходит при традиционном подходе (без применения AJAX).
<p>Приложения, написанные на JavaScript, могут исполняться на серверах, использующих Java 6 и более поздних версий. Это обстоятельство используется для построения серверных приложений, позволяющих обрабатывать JavaScript на стороне сервера.
<p>JavaScript используется для написания прикладного ПО. Одним из ярких примеров является Mozilla Firefox, 57 % исходного кода которого написано на JavaScript (для сравнения, следующим языком программирования по объёму кодовой базы Firefox является C++, доля которого составляет 17 %).
Сценарии JavaScript поддерживаются также в таких приложениях Adobe, как Adobe Photoshop, Adobe Dreamweaver, Adobe Illustrator и Adobe InDesign.
<p>JavaScript — подходящий язык для обучения программированию игр. По сравнению с альтернативами, он функционально достаточен, прост в изучении и в применении, снижает сложность для обучения, мотивирует обучаемых делиться своими играми с другими.
</div>

<h3 class="show" onclick="Click(this)">Размещение сценария на Web-странице</h3>
<div>
<p>Первый сценарий предназначен для знакомства с основами создания и размещения JavaScript на Web-странице. В ходе урока вы узнаете о том, что можно и чего нельзя делать в JavaScript. Этот сценарий выводит текст на Web-страницу. В данном случае текст будет красного цвета. Итак:

<xmp>
<script>
document.write('<span style="color:red">Это красный текст </font>')
</script>
</xmp>
<h4 class="show" onclick="OpenPrev(this)">Выполнить</h4>

<xmp>
<script type="application/javascript" src="scripts/MyScript.js"></script>
</xmp>

<p>JavaScript располагается внутри документа HTML. 
<xmp>
<html>
 <head>
   <script type="application/javascript" src="scripts/MyScript.js"></script>
 </head>
 <body>
 .............
 <script....>
  ..................
 </script>
 .............
 </body>
</html>
</xmp>
<p>Сценарий устроен следующим образом. В браузере объявляется документ (документ HTML). 
Этот документ может содержать сценарии JavaScript. То, что будет написано, находится внутри скобок.



<ul>
<li>Переменные можна описывать ключевым словом <code>var</code> (от variable, переменная), затем идет имя, знак = и значение переменной. <code>var</code> можно не писать, это имеет смысл только внутри функций.
<li>Имя переменной может состоять из одного или нескольких символов (буквы <code>a-zA-Z</code>, цифры <code>0-9</code>, символ подчеркивания <code>_</code> и знак <code>$</code>). Но лучше использовать содержательные имена.
<li>Имена переменных различают регистр букв! То есть, Хvar и хvar — это два разных имени переменных.
<li>Допустимая длина имени переменной существенно различна для разных браузеров. В целях безопасности берите имена не больше 30 символов. Не используйте в именах пробелы.
<li>Значение, присваиваемое текстовой переменной, ставится в кавычки. Числовые переменные не ставятся в кавычки, иначе сценарий воспримет их как текст с числовым значением 0!
<li>Операции сложения, вычитания, умножения и деления обозначаются знаками +, -, *, и / соответственно.
<li>Знак плюс (+) выполняет две задачи: сложение чисел или соединение вместе двух строк текста (например, "Joe" + " Burns" будет "Joe Burns"). /то часто вызывает трудности у начинающих програмистов.
<li>Все языки программирования имеют зарезервированные слова, например, названия операторов. В любой книге можно найти их перечень. Использование зарезервированных слов в качестве имен переменных будет приводить к ошибкам.
<li>Если необходимо, применяйте в именах переменных вместо пробела знак подчеркивания <code>_</code>: <code>user_name</code>.
</ul>
</diV>

<h3 class="show" onclick="Click(this)">Зарезервированные слова JavaScript</h3>
<div>
<table width="100%" cellspacing="2" cellpadding="5">
<caption>Зарезервированные слова</caption>
<tr>
<td> <code>break</code></td>
<td><code>delete</code></td>
<td><code>function</code></td>
<td><code>return</code></td>
<td><code>typeof</code></td>
</tr><tr>
<td><code>case</code></td>
<td><code>do</code></td>
<td><code>if</code></td>
<td><code>switch</code></td>
<td><code>var</code></td>
</tr><tr>
<td><code>catch</code></td>
<td><code>else</code></td>
<td><code>in</code></td>
<td><code>this</code></td>
<td><code>void</code></td>
</tr><tr>
<td><code>continue</code></td>
<td><code>false</code></td>
<td><code>instanceof</code></td>
<td><code>throw</code></td>
<td><code>while</code></td>
</tr><tr>
<td><code>debugger</code></td>
<td><code>finally</code></td>
<td><code>new</code></td>
<td><code>true</code></td>
<td><code>with</code></td>
</tr><tr>
<td><code>default</code></td>
<td><code>for</code></td>
<td><code>null</code></td>
<td><code>try</code></td>
<td>&nbsp;</td>
</tr></table>
<br>


<table width="100%" cellspacing="2" cellpadding="5">
<caption>Зарезервированные слова для будущего использования</caption>
<tr>
<td><code>abstract</code></td>
<td><code>double</code></td>
<td><code>goto</code></td>
<td><code>native</code></td>
<td><code>static</code></td>
</tr><tr>
<td><code>boolean</code></td>
<td><code>enum</code></td>
<td><code>implements</code></td>
<td><code>package</code></td>
<td><code>super</code></td>
</tr><tr>
<td><code>byte</code></td>
<td><code>export</code></td>
<td><code>import</code></td>
<td><code>private</code></td>
<td><code>synchronized</code></td>
</tr><tr>
<td><code>char</code></td>
<td><code>extends</code></td>
<td><code>int</code></td>
<td><code>protected</code></td>
<td><code>throws</code></td>
</tr><tr>
<td><code>class</code></td>
<td><code>final</code></td>
<td><code>interface</code></td>
<td><code>public</code></td>
<td><code>transient</code></td>
</tr><tr>
<td><code>const</code></td>
<td><code>float</code></td>
<td><code>long</code></td>
<td><code>short</code></td>
<td><code>volatile</code></td>
</tr></table>

</div>

<h3 class="show" onclick="Click(this)">Задание</h3>
<div>
Напишите сценарий, который в процессе загрузки документа запишет текущую дату и день недели.
Для вывода используйте метод <code>write</code> объекта <code>document</code>.
Для определения текущей даты воспользуетесь справочником по JavaScript (объект <code>Date</code>).
</div>

<hr width="40%" align="center">
</body>
</html>